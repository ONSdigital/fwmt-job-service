import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'
apply plugin: "findbugs"

mainClassName = 'uk.gov.ons.fwmt.job_service.ApplicationConfig'

description = "fwmt-job-service"

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '1.0.0'

jar {
    group = 'uk.gov.ons.fwmt'
    baseName = 'fwmt-job-service'
    version = version
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
    }
}

repositories {
    mavenCentral()
       maven { url "https://oss.sonatype.org/content/repositories/libs-snapshot" }
       maven { url "http://repo.maven.apache.org/maven2" }
}

configurations {
    jaxb
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${projectDir}/src/main/resources/wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
                schema(dir: schema, includes: "**/*.wsdl")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}


dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.5.13.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web-services', version: '1.5.13.RELEASE'
    compile(group: 'org.springframework.cloud', name: 'spring-cloud-spring-service-connector', version: '1.2.5.RELEASE') {
        exclude(module: 'log4j')
    }
    compile group: 'org.springframework.cloud', name: 'spring-cloud-cloudfoundry-connector', version: '1.2.5.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '1.5.13.RELEASE'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.springframework.cloud', name: 'spring-cloud-cloudfoundry-connector', version:'1.2.5.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version:'1.5.13.RELEASE'
    compile(group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.3') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.jsoup', name: 'jsoup', version: '1.11.3'
    compile group: 'org.json', name: 'json', version: '20180130'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.8'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.21'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.5'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.1'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.1'
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.5'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.5'

    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.9.RELEASE') {
        exclude(module: 'android-json')
    }
    testCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    testCompile group: 'io.cucumber', name: 'cucumber-java8', version: '3.0.2'
    testCompile group: 'io.cucumber', name: 'cucumber-junit', version: '3.0.2'
    testCompile group: 'io.cucumber', name: 'cucumber-spring', version: '3.0.2'
	testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '1.7.0'
    testCompile group: 'org.powermock', name: 'powermock-core', version: '1.7.0'
	testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.7.0'
	testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.1'
    testCompile "junit:junit:4.12"
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

processResources {
    filter ReplaceTokens, tokens: [
            "project.artifactId": "name",
            "project.version": "version",
            "scm.url": "url",
            "buildNumber": "buildnumber",
            "scmBranch": "branch",
            "timestamp": "timestamp",
    ]
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/legacy_ingest/*',
                    '**/dto/*',
                    '**/data/tm/*',
                    '**/config/*',
                    '**/CSVParseFinalResult.java',
  					'**/ApplicationConfig.java',
  					'**/WebConfig.java'
            ])
        })
    }
}	
test.finalizedBy(project.tasks.jacocoTestReport)

check.dependsOn jacocoTestReport

findbugs {
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}


tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}